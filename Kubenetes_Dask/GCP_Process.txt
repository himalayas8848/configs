Reference: from google lab
https://codelabs.developers.google.com/codelabs/cloud-hello-kubernetes/index.html?index=..%2F..%2Findex#1
Create a project and give a project name - write down PROJECT_ID
Active  Google Cloud Shell
You can view the account - gcloud auth list
gcloud config list project
If the project not set up,using this code: gcloud config set project <PROJECT_ID>
And Check out what ID you used in the setup steps or look it up in the console dashboard.
Finally set up zone: gcloud config set compute/zone us-central1-f  

Create a Docker container image
vi Dockerfile
docker build -t gcr.io/PROJECT_ID/hello-node:v1 .
docker run -d -p 8080:8080 gcr.io/PROJECT_ID/hello-node:v1
curl http://localhost:8080 You can see the web output.
docker ps
Let's first enable the registry. For that use the top-level search box in the console to look for "registry", select "Container Registry" and enable the feature.
You can now push your container image to this cloud private registry :
gcloud docker -- push gcr.io/PROJECT_ID/hello-node:v1

Create your cluster
you are now ready to create your Kubernetes cluster but before that, navigate to the Google Kubernetes Engine section of the web console and wait for the system to initialize
gcloud config set project PROJECT_ID
gcloud container clusters create hello-world \
                --num-nodes 2 \
                --machine-type n1-standard-1 \
                --zone us-central1-f

Create your pods
kubectl run hello-node \
    --image=gcr.io/PROJECT_ID/hello-node:v1 \
    --port=8080
kubectl get deployments
kubectl get pods
kubectl cluster-info
kubectl config view
kubectl get events

Allow external traffic
kubectl expose deployment hello-node --type="LoadBalancer"
service "hello-node" exposed
service "hello-node" exposed

Scale up your service
kubectl scale deployment hello-node --replicas=4
kubectl get deployment
kubectl get pods

Roll out an upgrade to your service
First, let's modify the application. From CloudShell, edit server.js and update the response message
We can now build and publish a new container image to the registry with an incremented tag (v2 in this case)
docker build -t gcr.io/PROJECT_ID/hello-node:v2 . 
gcloud docker -- push gcr.io/PROJECT_ID/hello-node:v2
kubectl edit command by updating the spec.template.spec.containers.image
kubectl get deployments


kubectl delete service,deployment hello-node
gcloud container clusters delete hello-world --zone=us-central1-f
gcloud container images list
gcloud container images delete gcr.io/io17-testing/hello-node:v1 \
                                 gcr.io/io17-testing/hello-node:v2


######################################################################################################################################
Reference:
http://omerio.com/2016/01/02/getting-started-with-kubernetes-on-google-container-engine/

gcloud compute zones list

gcloud config set compute/zone us-east1-d

gcloud container clusters create jupyter-hub-1  # This is the app name.

explicitly specify the number of nodes and their types then we would use the following command:
gcloud container clusters create jupyter-hub-1 \
--num-nodes 1 \
--machine-type g1-small

gcloud container clusters describe jupyter-hub-1
#You will notice toward the end of the output there is a username and password.

kubectl cluster-info

#Deploying the Pods
git clone https://github.com/omerio/kubernetes-graphviz.git
cd kubernetes-graphviz

kubectl create -f backend-controller.yaml

kubectl get rc

kubectl get pods -o wide

SSH one of the nodes
kubectl get pods -o wide

sudo docker ps
